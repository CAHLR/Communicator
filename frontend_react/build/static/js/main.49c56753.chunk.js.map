{"version":3,"sources":["Spacer.jsx","Charts.jsx","Communicator.jsx","index.js"],"names":["Spacer","react_default","a","createElement","style","height","width","Charts","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filterLimits","completion-chart","attrition-chart","certification-chart","tempCrossfilter","crossfilter","completion","dimension","d","completion_prediction","attrition","attrition_prediction","certification","certification_prediction","completions","group","Math","floor","attritions","certifications","anonUserId","anon_user_id","charts","idLookup","initialized","onAttrClick","bind","assertThisInitialized","onCompNoCertClick","filter","inherits","createClass","key","value","syncChart","nextProps","nextState","filteredStudents","JSON","stringify","renderCharts","allStudents","limits","forEach","c","i","htmlId","id","_this2","barChart","x","margin","top","right","bottom","left","y","d3","linear","range","brushDirty","round","all","axis","orient","brush","chart","domain","div","concat","g","select","empty","append","attr","selectAll","data","enter","datum","gBrush","e","extent","groups","path","n","length","push","join","on","map","filterRange","setState","objectSpread","defineProperty","filterAll","_","scale","clear","filters","students","rangeRound","forceRerender","_this3","float","marginTop","type","onClick","display","Spacer_Spacer","className","reset","color","Infinity","size","React","Component","Communicator","analyticsOptions","dropdownValue","instructorEmail","emailButtonError","analyticsRadio","analyticsDisplay","allRadio","emailButtonClicked","totalActiveLearners","emailSubject","emailBody","instructorName","emailSentMessage","oldSubject","automatedChecked","automatedDisplay","automated2Display","saveChangesDisplay","tipDisplay","allRecipientsDisplay","recipientsDisplay","onEmailButtonClick","onLoad","onAnalyticsRadioClick","onAllRadioClick","getAnalytics","getAll","setInstructorEmail","setEmailSubject","clearDrop","makeName","sendEmails","sendPolicy","loadData","onAutomatedClick","setEmailBody","setInstructorName","optSelected","onCheckTipMouseOver","onCheckTipMouseOut","saveChanges","onSaveChangesClick","event","target","checked","includes","process","fetch","method","settings","json","selected","subject","comp","cert","body","reply","from","keys","name","timestamp","analyticsApiResult","appendedOptions","analyticsKeys","auto","toConsumableArray","ids","ann","course","window","location","href","split","pass","setTimeout","automated","old_subject","console","log","analytics","Date","dataUrl","response","headers","Authorization","btoa","text","parse","index","formattedDate","toDateString","r","padding","marginBottom","onChange","Charts_Charts","borderStyle","minHeight","placeholder","backgroundColor","backgroundImage","onMouseOver","onMouseOut","onFocus","onBlur","ReactDOM","render","src_Communicator","document","getElementById"],"mappings":"uSAEaA,EAAS,kBAAMC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,WCahDC,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACjBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CAKXC,aAAc,CACZC,mBAAoB,CAAC,EAAG,KACxBC,kBAAmB,CAAC,EAAG,KACvBC,sBAAuB,CAAC,EAAG,OAK/B,IAAMC,EAAkBC,EAAY,IAfnB,OAiBjBb,EAAKc,WAAaF,EAAgBG,UAAU,SAAAC,GAAC,OAAIA,EAAEC,wBACnDjB,EAAKkB,UAAYN,EAAgBG,UAAU,SAAAC,GAAC,OAAIA,EAAEG,uBAClDnB,EAAKoB,cAAgBR,EAAgBG,UAAU,SAAAC,GAAC,OAAIA,EAAEK,2BAEtDrB,EAAKsB,YAActB,EAAKc,WAAWS,MAAMC,KAAKC,OAC9CzB,EAAK0B,WAAa1B,EAAKkB,UAAUK,MAAMC,KAAKC,OAC5CzB,EAAK2B,eAAiB3B,EAAKoB,cAAcG,MAAMC,KAAKC,OAEpDzB,EAAK4B,WAAahB,EAAgBG,UAAU,SAAAC,GAAC,OAAIA,EAAEa,eAEnD7B,EAAK8B,OAAS,GACd9B,EAAK+B,SAAW,GAOhB/B,EAAKgC,aAAc,EAGnBhC,EAAKiC,YAAcjC,EAAKiC,YAAYC,KAAjBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACnBA,EAAKoC,kBAAoBpC,EAAKoC,kBAAkBF,KAAvBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACzBA,EAAKqC,OAASrC,EAAKqC,OAAOH,KAAZjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAxCGA,EADrB,OAAAC,OAAAqC,EAAA,EAAArC,CAAAJ,EAAAC,GAAAG,OAAAsC,EAAA,EAAAtC,CAAAJ,EAAA,EAAA2C,IAAA,oBAAAC,MAAA,WA8CItC,KAAKJ,MAAM2C,UAAU,CACnBL,OAAQlC,KAAKkC,WA/CnB,CAAAG,IAAA,wBAAAC,MAAA,SAmDwBE,EAAWC,GAI/B,OAAID,EAAUE,mBAAqB1C,KAAKJ,MAAM8C,kBAI1CC,KAAKC,UAAUH,EAAUpC,gBAAkBsC,KAAKC,UAAU5C,KAAKI,MAAMC,gBA3D7E,CAAAgC,IAAA,qBAAAC,MAAA,WAoEItC,KAAK6C,aAAa7C,KAAKJ,MAAMkD,YAAa9C,KAAKJ,MAAM8C,oBApEzD,CAAAL,IAAA,cAAAC,MAAA,WA6EI,IAAMS,EAAS,CAAC,CAAC,EAAG,IAAK,CAAC,GAAI,KAAM,CAAC,EAAG,KACxC/C,KAAK2B,OAAOqB,QAAQ,SAACC,EAAGC,GACtBD,EAAEf,OAAOa,EAAOG,QA/EtB,CAAAb,IAAA,oBAAAC,MAAA,WAyFI,IAAMS,EAAS,CAAC,CAAC,GAAI,KAAM,KAAM,CAAC,EAAG,KACrC/C,KAAK2B,OAAOqB,QAAQ,SAACC,EAAGC,GACtBD,EAAEf,OAAOa,EAAOG,QA3FtB,CAAAb,IAAA,WAAAC,MAAA,SAmGWa,GAAQ,IAEXC,EAFWC,EAAArD,KACVA,KAAKsD,SAASF,KAAIpD,KAAKsD,SAASF,GAAK,GAKpCD,KAAUnD,KAAK4B,SAKnBwB,EAAKpD,KAAK4B,SAASuB,IAJnBnD,KAAK4B,SAASuB,GAAUnD,KAAKsD,SAASF,GAEtCA,EAAKpD,KAAKsD,SAASF,IAMrB,IAMIG,EANAC,EAAS,CACXC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,IAGJC,EAAIC,QAASC,SAASC,MAAM,CAAC,IAAK,IACtChE,KAAKsD,SAASF,IAAM,EACpB,IAEIa,EACArD,EACAQ,EACA8C,EACAC,EANEC,EAAON,MAAOM,OAAOC,OAAO,UAC5BC,EAAQR,MAAOQ,QAUfC,EAAQ,WACZ,IAAM9E,EAAQ8D,EAAES,QAAQ,GAClBxE,EAASqE,EAAEG,QAAQ,GACzBH,EAAEW,OAAO,CAAC,EAAGL,EAAIV,IAAI,GAAG,GAAGnB,QAE3B,IAAMmC,EAAMX,SAAA,IAAAY,OAAcvB,IACtBwB,EAAIF,EAAIG,OAAO,KAqBnB,GAAID,EAAEE,QAAS,EACbF,EAAIF,EAAIK,OAAO,OACZC,KAAK,QAAStF,EAAQ+D,EAAOI,KAAOJ,EAAOE,OAC3CqB,KAAK,SAAUvF,EAASgE,EAAOC,IAAMD,EAAOG,QAC5CmB,OAAO,KACPC,KAAK,YAAa,aAAevB,EAAOI,KAAO,IAAMJ,EAAOC,IAAM,MAEnEqB,OAAO,YACNC,KAAK,KAAM,QAAU3B,GACrB0B,OAAO,QACPC,KAAK,QAAStF,GACdsF,KAAK,SAAUvF,GAClBmF,EAAEK,UAAU,QACTC,KAAK,CAAC,aAAc,eACpBC,QAAQJ,OAAO,QACfC,KAAK,QAAS,SAAAlE,GAAC,OAAIA,EAAI,SACvBsE,MAAM/D,EAAM+C,OAEfQ,EAAEK,UAAU,mBACTD,KAAK,YAAa,aAAe3B,EAAK,KAEzCuB,EAAEG,OAAO,KACNC,KAAK,QAAS,QACdA,KAAK,YAAa,eAAiBvF,EAAS,KAC5CW,KAAKiE,GAGR,IAAMgB,EAAST,EAAEG,OAAO,KAAKC,KAAK,QAAS,SAAS5E,KAAKmE,GACzDc,EAAOJ,UAAU,QAAQD,KAAK,SAAUvF,GACxC4F,EAAOJ,UAAU,WAAWF,OAAO,QAAQC,KAAK,IAhD/B,SAAClE,GAClB,IAAMwE,IAAY,MAANxE,GAEN0C,EAAI8B,EAAI,GAAK,EAEbxB,EAAIrE,EAAS,EAEnB,MAAO,IAAO,GAAM+D,EAAK,IAAMM,EAC3B,YAAcwB,EAAI,IAAO,IAAM9B,EAAK,KAAOM,EAAI,GAC/C,KAAQ,EAAIA,EAAK,GACjB,YAAcwB,EAAI,IAAO,GAAM9B,EAAK,IAAO,EAAIM,EAC/C,KACO,IAAMN,EAAK,KAAOM,EAAI,GAC7B,KAAQ,EAAIA,EAAK,GACjB,IAAO,IAAMN,EAAK,KAAOM,EAAI,GAC7B,KAAQ,EAAIA,EAAK,KAqCvB,GAAII,EAGF,GAFAA,GAAa,EACbU,EAAEK,UAAU,UAAU7E,KAAKmE,GACvBA,EAAMO,QACRF,EAAEK,UAAU,SAAW5B,EAAK,SACzB2B,KAAK,IAAK,GACVA,KAAK,QAAStF,OACZ,CACL,IAAM6F,EAAShB,EAAMgB,SACrBX,EAAEK,UAAU,SAAW5B,EAAK,SACzB2B,KAAK,IAAKxB,EAAE+B,EAAO,KACnBP,KAAK,QAASxB,EAAE+B,EAAO,IAAM/B,EAAE+B,EAAO,KAmB7CX,EAAEK,UAAU,QAAQD,KAAK,IAdT,SAACQ,GACf,IAGI1E,EAHE2E,EAAO,GACTtC,GAAK,EACHuC,EAAIF,EAAOG,OAGjB,IADAxC,GAAK,EACEA,EAAIuC,GACT5E,EAAI0E,EAAOrC,GACXsC,EAAKG,KAAK,IAAKpC,EAAE1C,EAAEwB,KAAM,IAAK7C,EAAQ,IAAKqE,EAAEhD,EAAEyB,OAAQ,MAAO9C,GAC9D0D,GAAK,EAEP,OAAOsC,EAAKI,KAAK,OAmIrB,OA5HAtB,EAAMuB,GAAG,mBAAoB,WACf/B,SAAA,IAAAY,OAAcvB,IACtByB,OAAO,iBAAiBrF,MAAM,UAAW,QAI/C+E,EAAMuB,GAAG,cAAe,WACtB,IAAMlB,EAAIb,SAAA,IAAAY,OAAcvB,IAAUyB,OAAO,KACrCU,EAAShB,EAAMgB,SACfpB,GACFS,EAAEC,OAAO,UACNzE,KAAKmE,EAAMgB,OAAOA,EAASA,EAAOQ,IAAI5B,KACtCc,UAAU,WACVzF,MAAM,UAAW,MAEtBoF,EAAEC,OAAO,SAAWxB,EAAK,SACtB2B,KAAK,IAAKxB,EAAE+B,EAAO,KACnBP,KAAK,QAASxB,EAAE+B,EAAO,IAAM/B,EAAE+B,EAAO,KACzC1E,EAAUmF,YAAYT,GAEtBjC,EAAK2C,SAAS,CACZ3F,aAAaP,OAAAmG,EAAA,EAAAnG,CAAA,GACRuD,EAAKjD,MAAMC,aADJP,OAAAoG,EAAA,EAAApG,CAAA,MAAA4E,OAENvB,GAAWmC,MAGnBjC,EAAKzD,MAAM2C,UAAU,CACnBlC,aAAcgD,EAAKjD,MAAMC,iBAM7BiE,EAAMuB,GAAG,iBAAkB,WACzB,GAAIvB,EAAMO,QAAS,CACjB,IAAMJ,EAAMX,SAAA,IAAAY,OAAcvB,IAC1BsB,EAAIG,OAAO,iBAAiBrF,MAAM,UAAW,QAC7CkF,EAAIG,OAAO,SAAWxB,EAAK,SAAS2B,KAAK,IAAK,MAAMA,KAAK,QAAS,QAClEnE,EAAUuF,eAKd5B,EAAMf,OAAS,SAAC4C,GACd,OAAKA,GACL5C,EAAS4C,EACF7B,GAFQf,GAMjBe,EAAMhB,EAAI,SAAC6C,GACT,OAAKA,GACL7C,EAAI6C,EACJhC,EAAKiC,MAAM9C,GACXe,EAAMf,EAAEA,GACDgB,GAJQhB,GASjBgB,EAAMV,EAAI,SAACuC,GACT,OAAKA,GACLvC,EAAIuC,EACG7B,GAFQV,GAMjBU,EAAM3D,UAAY,SAACwF,GACjB,OAAKA,GACLxF,EAAYwF,EACL7B,GAFQ3D,GAMjB2D,EAAMJ,IAAM,SAACiC,GACX,OAAKA,GACLjC,EAAMiC,EACC7B,GAFQJ,GAUjBI,EAAMrC,OAAS,SAACkE,GAuBd,OAtBIA,GACF9B,EAAMgB,OAAOc,GACbxF,EAAUmF,YAAYK,GACtB/C,EAAK2C,SAAS,CACZ3F,aAAaP,OAAAmG,EAAA,EAAAnG,CAAA,GACRuD,EAAKjD,MAAMC,aADJP,OAAAoG,EAAA,EAAApG,CAAA,MAAA4E,OAENvB,GAAWiD,QAInB9B,EAAMgC,QACN1F,EAAUuF,YACV9C,EAAK2C,SAAS,CACZ3F,aAAaP,OAAAmG,EAAA,EAAAnG,CAAA,GACRuD,EAAKjD,MAAMC,aADJP,OAAAoG,EAAA,EAAApG,CAAA,MAAA4E,OAENvB,GAAW,CAAC,EAAG,UAIzBE,EAAKzD,MAAM2C,UAAUc,EAAKjD,MAAMC,cAChC4D,GAAa,EACbM,IACOA,GAITA,EAAMnD,MAAQ,SAACgF,GACb,OAAKA,GACLhF,EAAQgF,EACD7B,GAFQnD,GAMjBmD,EAAML,MAAQ,SAACkC,GACb,OAAKA,GACLlC,EAAQkC,EACD7B,GAFQL,GAIVJ,SAAUS,EAAOD,EAAO,QAhWnC,CAAAjC,IAAA,SAAAC,MAAA,SA2WSiE,GACL,IAAK,IAAIrD,EAAI,EAAGA,EAAIlD,KAAK2B,OAAO+D,OAAQxC,GAAK,EAC3ClD,KAAK2B,OAAOuB,GAAGhB,OAAOqE,EAAQrD,MA7WpC,CAAAb,IAAA,QAAAC,MAAA,SAkXQY,GACJlD,KAAK2B,OAAOuB,GAAGhB,OAAO,QAnX1B,CAAAG,IAAA,eAAAC,MAAA,SA2XeQ,EAAa0D,GAExB,IAAKA,IAAa1D,EAChB,OAAO,KAKJ9C,KAAK6B,cACR7B,KAAKW,WAAa6F,EAAS5F,UAAU,SAAAC,GAAC,OAAIA,EAAEC,wBAC5Cd,KAAKe,UAAYyF,EAAS5F,UAAU,SAAAC,GAAC,OAAIA,EAAEG,uBAC3ChB,KAAKiB,cAAgBuF,EAAS5F,UAAU,SAAAC,GAAC,OAAIA,EAAEK,2BAC/ClB,KAAKmB,YAAcnB,KAAKW,WAAWS,MAAMC,KAAKC,OAC9CtB,KAAKuB,WAAavB,KAAKe,UAAUK,MAAMC,KAAKC,OAC5CtB,KAAKwB,eAAiBxB,KAAKiB,cAAcG,MAAMC,KAAKC,OACpDtB,KAAKyB,WAAa+E,EAAS5F,UAAU,SAAAC,GAAC,OAAIA,EAAEa,eAE5C1B,KAAK6B,aAAc,GAIrB,IAAMF,EAAS,CACb3B,KAAKsD,SAAS,oBACXa,IAAIrB,EAAYlC,UAAU,SAAAC,GAAC,OAAIA,EAAEC,wBAAuBM,MAAMC,KAAKC,QACnEV,UAAUZ,KAAKW,YACfS,MAAMpB,KAAKmB,aACXoC,EAAEO,QAASC,SACTS,OAAO,CAAC,EAAG,MACXiC,WAAW,CAAC,EAAG,OACpBzG,KAAKsD,SAAS,mBACXa,IAAIrB,EAAYlC,UAAU,SAAAC,GAAC,OAAIA,EAAEG,uBAAsBI,MAAMC,KAAKC,QAClEV,UAAUZ,KAAKe,WACfK,MAAMpB,KAAKuB,YACXgC,EAAEO,QAASC,SACTS,OAAO,CAAC,EAAG,MACXiC,WAAW,CAAC,EAAG,OACpBzG,KAAKsD,SAAS,uBACXa,IAAIrB,EAAYlC,UAAU,SAAAC,GAAC,OAAIA,EAAEK,2BAA0BE,MAAMC,KAAKC,QACtEV,UAAUZ,KAAKiB,eACfG,MAAMpB,KAAKwB,gBACX+B,EAAEO,QAASC,SACTS,OAAO,CAAC,EAAG,MACXiC,WAAW,CAAC,EAAG,QAUtB,OANA9E,EAAOqB,QAAQ,SAAAuB,GAAK,OAAIA,MAExBvE,KAAK2B,OAASA,EAGd3B,KAAKJ,MAAM8G,gBACJ/E,IA/aX,CAAAU,IAAA,SAAAC,MAAA,WAkbW,IAAAqE,EAAA3G,KACP,OACEZ,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAEqH,MAAO,OAAQN,MAAO,OAAQO,UAAW,SAArD,8BAEEzH,EAAAC,EAAAC,cAAA,UAAQwH,KAAK,SAAS1D,GAAG,eAAe2D,QAAS/G,KAAKiC,mBAAtD,uDAGA7C,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEE,MAAO,EAAGD,OAAQ,GAAIwH,QAAS,kBAC7C5H,EAAAC,EAAAC,cAAA,UAAQwH,KAAK,SAAS1D,GAAG,oBAAoB2D,QAAS/G,KAAK8B,aAA3D,yCAIF1C,EAAAC,EAAAC,cAAC2H,EAAD,MAGA7H,EAAAC,EAAAC,cAAA,OAAK8D,GAAG,UACNhE,EAAAC,EAAAC,cAAA,OAAK8D,GAAG,mBAAmB8D,UAAU,SACnC9H,EAAAC,EAAAC,cAAA,OAAK4H,UAAU,SAAf,sBACsB,IACpB9H,EAAAC,EAAAC,cAAA,UACE4H,UAAU,QACVH,QAAS,kBAAMJ,EAAKQ,MAAM,IAC1B5H,MAAO,CACLyH,QAAS,OACTI,MAAO,UALX,WAYJhI,EAAAC,EAAAC,cAAA,OAAK8D,GAAG,kBAAkB8D,UAAU,SAClC9H,EAAAC,EAAAC,cAAA,OAAK4H,UAAU,SAAf,qBACqB,IACnB9H,EAAAC,EAAAC,cAAA,UACE4H,UAAU,QACVH,QAAS,kBAAMJ,EAAKQ,MAAM,IAC1B5H,MAAO,CACLyH,QAAS,OACTI,MAAO,UALX,WAYJhI,EAAAC,EAAAC,cAAA,OAAK8D,GAAG,sBAAsB8D,UAAU,SACtC9H,EAAAC,EAAAC,cAAA,OAAK4H,UAAU,SAAf,yBACyB,IACvB9H,EAAAC,EAAAC,cAAA,UACE4H,UAAU,QACVH,QAAS,kBAAMJ,EAAKQ,MAAM,IAC1B5H,MAAO,CACLyH,QAAS,OACTI,MAAO,UALX,YAeNhI,EAAAC,EAAAC,cAAA,SAAO8D,GAAG,UACRhE,EAAAC,EAAAC,cAAA,QAAM8D,GAAG,UAAT,GAAAsB,OACO1E,KAAKyB,WAAWgC,IAAI4D,KAAU3B,OAAS,EAAI1F,KAAKyB,WAAWgC,IAAI4D,KAAU3B,OAAS,IADzF,MAGAtG,EAAAC,EAAAC,cAAA,QAAM8D,GAAG,cAAT,IACI/B,KAAK6C,MAA8C,IAAvClE,KAAKyB,WAAWgC,IAAI4D,KAAU3B,OAAgB1F,KAAKJ,MAAMkD,YAAYwE,QADrF,KACgG,KALlG,KAOK,IACHlI,EAAAC,EAAAC,cAAA,QAAM8D,GAAG,SAASpD,KAAKJ,MAAMkD,YAAYwE,OAAS,EAAItH,KAAKJ,MAAMkD,YAAYwE,OAAS,KACrF,IATH,oBASyB,UA7fjC5H,EAAA,CAA4B6H,IAAMC,WC6xBnBC,qBAvxBb,SAAAA,EAAY7H,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyH,IACjB5H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2H,GAAAtH,KAAAH,KAAMJ,KACDQ,MAAQ,CAcXsH,iBAAkB,GAIlBC,cAAe,GAIfC,gBAAiB,GAIjBC,iBAAkB,GAKlBC,gBAAgB,EAKhBC,iBAAkB,QAIlBC,UAAU,EAKVC,oBAAoB,EAKpBC,oBAAqB,EAIrBC,aAAc,GAIdC,UAAW,GAIXC,eAAgB,GAKhBC,iBAAkB,GAKlBC,WAAY,GAKZC,kBAAkB,EAKlBC,iBAAkB,SAKlBC,kBAAmB,SAMnBC,mBAAoB,OAKpBC,WAAY,OAKZC,qBAAsB,OAKtBC,kBAAmB,QAOnB5G,OAAQ,aASR7B,aAAc,CACZC,mBAAoB,CAAC,EAAG,KACxBC,kBAAmB,CAAC,EAAG,KACvBC,sBAAuB,CAAC,EAAG,OAK/BX,EAAKkJ,mBAAqBlJ,EAAKkJ,mBAAmBhH,KAAxBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC1BA,EAAKmJ,OAASnJ,EAAKmJ,OAAOjH,KAAZjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACdA,EAAKoJ,sBAAwBpJ,EAAKoJ,sBAAsBlH,KAA3BjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC7BA,EAAKqJ,gBAAkBrJ,EAAKqJ,gBAAgBnH,KAArBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACvBA,EAAKsJ,aAAetJ,EAAKsJ,aAAapH,KAAlBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACpBA,EAAKuJ,OAASvJ,EAAKuJ,OAAOrH,KAAZjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACdA,EAAKwJ,mBAAqBxJ,EAAKwJ,mBAAmBtH,KAAxBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC1BA,EAAKyJ,gBAAkBzJ,EAAKyJ,gBAAgBvH,KAArBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACvBA,EAAK0J,UAAY1J,EAAK0J,UAAUxH,KAAfjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACjBA,EAAK2J,SAAW3J,EAAK2J,SAASzH,KAAdjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAChBA,EAAK4J,WAAa5J,EAAK4J,WAAW1H,KAAhBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAClBA,EAAK6J,WAAa7J,EAAK6J,WAAW3H,KAAhBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAClBA,EAAK8J,SAAW9J,EAAK8J,SAAS5H,KAAdjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAChBA,EAAK+J,iBAAmB/J,EAAK+J,iBAAiB7H,KAAtBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACxBA,EAAKgK,aAAehK,EAAKgK,aAAa9H,KAAlBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACpBA,EAAKiK,kBAAoBjK,EAAKiK,kBAAkB/H,KAAvBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACzBA,EAAKkK,YAAclK,EAAKkK,YAAYhI,KAAjBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACnBA,EAAKmK,oBAAsBnK,EAAKmK,oBAAoBjI,KAAzBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC3BA,EAAKoK,mBAAqBpK,EAAKoK,mBAAmBlI,KAAxBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC1BA,EAAKqK,YAAcrK,EAAKqK,YAAYnI,KAAjBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACnBA,EAAKsK,mBAAqBtK,EAAKsK,mBAAmBpI,KAAxBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAC1BA,EAAK6G,cAAgB7G,EAAK6G,cAAc3E,KAAnBjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KACrBA,EAAK0C,UAAY1C,EAAK0C,UAAUR,KAAfjC,OAAAkC,EAAA,EAAAlC,QAAAkC,EAAA,EAAAlC,CAAAD,KAIjBA,EAAKiD,YAAcpC,EAAY,IAC/Bb,EAAK6C,iBAAmBhC,EAAY,IAGpCb,EAAK4B,WAAa5B,EAAK6C,iBAAiB9B,UAAU,SAAAC,GAAC,OAAIA,EAAEa,eApKxC7B,oFAwKjBG,KAAKgJ,kDAOUoB,GACfpK,KAAKgG,SAAS,CACZwC,iBAAkB4B,EAAMC,OAAOC,kKAUE,KAA/BtK,KAAKI,MAAMwH,iBAA2B5H,KAAKI,MAAMwH,gBAAgB2C,SAAS,qBAC5EvK,KAAKgG,SAAS,CACZ6B,iBAAkB,4EAEX7H,KAAKI,MAAM6H,oDACdjI,KAAKyJ,WAAWzJ,KAAKyB,WAAWgC,IAAI4D,KAAUvB,IAAI,SAAAjF,GAAC,OAAIA,EAAEa,uCACzD1B,KAAK0J,WACT1J,KAAKyB,WAAWgC,IAAI4D,KAAUvB,IAAI,SAAAjF,GAAC,OAAIA,EAAEa,eACzC1B,KAAKI,MAAMC,aAAa,oBACxBL,KAAKI,MAAMC,aAAa,mBACxBL,KAAKI,MAAMC,aAAa,mCAEtBL,KAAKI,MAAM0H,iDACP9H,KAAKmJ,gEAELnJ,KAAKoJ,iBAGbpJ,KAAKgG,SAAS,CACZiC,oBAAoB,4BAGtBjI,KAAKgG,SAAS,CACZiC,oBAAoB,gQASlBjI,KAAK2J,SAAL,WAAAjF,OAAyB8F,uBAAzB,KAAA9F,OAAyD8F,OAAzD,4CACAxK,KAAKmJ,2JAQXnJ,KAAKgG,SAAS,CACZ+B,iBAAkB,OAClBC,UAAU,EACVF,gBAAgB,EAChBW,iBAAkB,OAClBC,kBAAmB,OACnBG,qBAAsB,QACtBC,kBAAmB,OACnBH,mBAAoB,SAEtB3I,KAAKI,MAAM8B,OAAO,CAAC,CAAC,EAAG,KAAM,CAAC,EAAG,KAAM,CAAC,EAAG,OAC3ClC,KAAKoJ,yDAQLpJ,KAAKgG,SAAS,CACZ+B,iBAAkB,QAClBU,iBAAkB,SAClBC,kBAAmB,SACnBG,qBAAsB,OACtBC,kBAAmB,QACnBhB,gBAAgB,EAChBE,UAAU,IAEZhI,KAAKI,MAAM8B,OAAO,CAAC,KAAM,KAAM,OAC/BlC,KAAKmJ,4DAOLnJ,KAAKgG,SAAS,CACZ4C,WAAY,uDAQd5I,KAAKgG,SAAS,CACZ4C,WAAY,+KAUR5I,KAAKkK,YACTlK,KAAKyB,WAAWgC,IAAI4D,KAAUvB,IAAI,SAAAjF,GAAC,OAAIA,EAAEa,eACzC1B,KAAKI,MAAMC,aAAa,oBACxBL,KAAKI,MAAMC,aAAa,mBACxBL,KAAKI,MAAMC,aAAa,+CAEpBL,KAAKmJ,sJAOAiB,GACXpK,KAAKgG,SAAS,CACZoC,UAAWgC,EAAMC,OAAO/H,gDAQZ8H,GACdpK,KAAKgG,SAAS,CACZmC,aAAciC,EAAMC,OAAO/H,mDAQZ8H,GACjBpK,KAAKgG,SAAS,CACZ4B,gBAAiBwC,EAAMC,OAAO/H,+KAUXmI,MAAK,WAAA/F,OAAY8F,uBAAZ,KAAA9F,OAA4C8F,OAA5C,YAAkF,CAC1GE,OAAQ,sBADNC,kBAGaA,EAASC,cAC1B,GADAD,SACc,CAkBZ,IAjBMjD,EAAmB,CACvBtI,EAAAC,EAAAC,cAAA,UACEuL,UAAQ,EACRvI,MAAOK,KAAKC,UAAU,CACpBkI,QAAS,GACTC,KAAM,KACNhG,KAAM,KACNiG,KAAM,KACNC,KAAM,GACNC,MAAO,GACPC,KAAM,MATV,6BAeIC,EAAOtL,OAAOsL,KAAKT,GAChBzH,EAAI,EAAGA,EAAIkI,EAAK1F,OAAQxC,GAAK,EAC9BmI,EAAOrL,KAAKwJ,SAASmB,EAASS,EAAKlI,IAAIoI,UAAWX,EAASS,EAAKlI,IAAI4H,SAC1EpD,EAAiB/B,KAAKvG,EAAAC,EAAAC,cAAA,UAAQgD,MAAOK,KAAKC,UAAU+H,EAASS,EAAKlI,MAAOmI,IAE3ErL,KAAKgG,SAAS,CACZ0B,oSAW2B+C,MAAK,WAAA/F,OAAY8F,uBAAZ,KAAA9F,OAA4C8F,OAA5C,kBAAwF,CAC1HE,OAAQ,sBADNa,kBAGuBA,EAAmBX,cAC9C,GADAW,SACwB,CAKtB,IAJAvL,KAAKuJ,YACCiC,EAAkB,GAElBC,EAAgB3L,OAAOsL,KAAKG,GACzBrI,EAAI,EAAGA,EAAIuI,EAAc/F,OAAQxC,GAAK,EACzCmI,EAAOrL,KAAKwJ,SACd+B,EAAmBE,EAAcvI,IAAIoI,UACrCC,EAAmBE,EAAcvI,IAAI4H,SAEW,SAA9CS,EAAmBE,EAAcvI,IAAIwI,OACvCL,EAAI,YAAA3G,OAAe2G,IAErBG,EAAgB7F,KACdvG,EAAAC,EAAAC,cAAA,UAAQgD,MAAOK,KAAKC,UAAU2I,EAAmBE,EAAcvI,MAC5DmI,IAKPrL,KAAKgG,SAAS,CACZ0B,iBAAgB,GAAAhD,OAAA5E,OAAA6L,EAAA,EAAA7L,CAAME,KAAKI,MAAMsH,kBAAqB8D,iJAS1CpB,GAChBpK,KAAKgG,SAAS,CACZqC,eAAgB+B,EAAMC,OAAO/H,0CAUvB8D,GACRpG,KAAKgG,SAALlG,OAAAmG,EAAA,EAAAnG,CAAA,GACKsG,+EAQUwF,yFACTC,EAAM7L,KAAKI,MAAM4H,SAGjB8D,EAASC,OAAOC,SAASC,KAAKC,MAAM,KAAK,YAExBzB,MAAK,WAAA/F,OAAY8F,uBAAZ,KAAA9F,OAA4C8F,OAA5C,cAAoF,CAC9GE,OAAQ,OACRO,KAAMtI,KAAKC,UAAU,CACnBgJ,MACAd,QAAS9K,KAAKI,MAAM+H,aACpB8C,KAAMjL,KAAKI,MAAMgI,UACjB8C,MAAOlL,KAAKI,MAAMwH,gBAClBuD,KAAMnL,KAAKI,MAAMiI,eACjB8D,KAAM3B,iBACNqB,MACAC,gEAOI9L,KAAKkK,YACTlK,KAAKyB,WAAWgC,IAAI4D,KAAUvB,IAAI,SAAAjF,GAAC,OAAIA,EAAEa,eACzC1B,KAAKI,MAAMC,aAAa,oBACxBL,KAAKI,MAAMC,aAAa,mBACxBL,KAAKI,MAAMC,aAAa,+BAEtBL,KAAKI,MAAM0H,eACb9H,KAAKmJ,eAELnJ,KAAKoJ,SAEPpJ,KAAKgG,SAAS,CACZsC,iBAAkB,qBAClBL,oBAAoB,IAEtBmE,WAAW,WACT/I,EAAK2C,SAAS,CACZsC,iBAAkB,MAEnB,sLAWWsD,EAAKb,EAAMhG,EAAMiG,gFAC3BqB,EAAYrM,KAAKI,MAAMoI,0BAENiC,MAAK,WAAA/F,OAAY8F,uBAAZ,KAAA9F,OAA4C8F,OAA5C,gBAAsF,CAChHE,OAAQ,OACRO,KAAMtI,KAAKC,UAAU,CACnB0J,YAAatM,KAAKI,MAAMmI,WACxBqD,MACAT,KAAMnL,KAAKI,MAAMiI,eACjB6C,MAAOlL,KAAKI,MAAMwH,gBAClBkD,QAAS9K,KAAKI,MAAM+H,aACpB8C,KAAMjL,KAAKI,MAAMgI,UACjB2C,OACAhG,OACAiG,OACAU,KAAMW,qBAKRE,QAAQC,IAAI,kNAYCZ,EAAKb,EAAMhG,EAAMiG,kFAC1BqB,EAAYrM,KAAKI,MAAMoI,iBACvBiE,EAAYzM,KAAKI,MAAM0H,wBAEN2C,MAAK,WAAA/F,OAAY8F,uBAAZ,KAAA9F,OAA4C8F,OAA5C,aAAmF,CAC7GE,OAAQ,OACRO,KAAMtI,KAAKC,UAAU,CACnBgJ,MACAT,KAAMnL,KAAKI,MAAMiI,eACjB6C,MAAOlL,KAAKI,MAAMwH,gBAClBkD,QAAS9K,KAAKI,MAAM+H,aACpB8C,KAAMjL,KAAKI,MAAMgI,UACjB2C,OACAhG,OACAiG,OACAU,KAAMW,EACNI,YACAnB,UAAW,IAAIoB,wBAIjBH,QAAQC,IAAI,2KAQdxM,KAAKgG,SAAS,CACZ2B,cAAe,GACfD,iBAAkB,CAChBtI,EAAAC,EAAAC,cAAA,UACEuL,UAAQ,EACRvI,MAAOK,KAAKC,UAAU,CACpBkI,QAAS,GACTC,KAAM,KACNhG,KAAM,KACNiG,KAAM,KACNC,KAAM,GACNC,MAAO,GACPC,KAAM,MATV,uEAyBJoB,QAAQC,IAAIxM,KAAKI,MAAM8H,qBACvBlI,KAAKgG,SAAS,CACZkC,oBAAqB,6EASVyE,EAAS/B,iFAGlBA,kCACe9G,OAAQ6I,UAAzBC,gDAGiBnC,MAAMkC,EAAS,CAC9BE,QAAS,CACPC,cAAa,SAAApI,OAAWqI,KAAI,GAAArI,OAAI8F,oBAAJ,KAAA9F,OAA6C8F,oBAE3EE,OAAQ,sBAJVkC,mBAMiBA,EAASI,eAA1BJ,SACAA,EAAW9I,MAAOmJ,MAAML,WAK1B,IAFMpG,EAAWoG,EAER1J,EAAI,EAAGA,EAAIsD,EAASd,OAAQxC,GAAK,EACxCsD,EAAStD,GAAGgK,MAAQhK,EACpBsD,EAAStD,GAAGpC,uBAAyB0F,EAAStD,GAAGpC,sBACjD0F,EAAStD,GAAGlC,sBAAwBwF,EAAStD,GAAGlC,qBAChDwF,EAAStD,GAAGhC,0BAA4BsF,EAAStD,GAAGhC,yBAMtDlB,KAAK8C,YAAcpC,EAAY8F,GAC/BxG,KAAK0C,iBAAmBhC,EAAY8F,GACpCxG,KAAKyB,WAAazB,KAAK0C,iBAAiB9B,UAAU,SAAAC,GAAC,OAAIA,EAAEa,sJAQlD4J,EAAWR,GAClB,IAAMqC,EAAgB,IAAIT,KAAKpB,GAAW8B,eAAelB,MAAM,KAC/D,SAAAxH,OAAUyI,EAAc,GAAxB,KAAAzI,OAA8ByI,EAAc,GAA5C,KAAAzI,OAAkDyI,EAAc,GAAhE,OAAAzI,OAAwEoG,uCAgB9D8B,GACV,IAAMS,EAAI1K,KAAKsK,MAAML,GACrB5M,KAAKgG,SAAS,CACZuC,WAAY8E,EAAEvC,UAEhB9K,KAAKI,MAAM8B,OAAO,CAACmL,EAAEtC,KAAMsC,EAAEtI,KAAMsI,EAAErC,OACrChL,KAAKgG,SAAS,CACZmC,aAAckF,EAAEvC,QAChB1C,UAAWiF,EAAEpC,KACbrD,gBAAiByF,EAAEnC,MACnB7C,eAAgBgF,EAAElC,OAEL,SAAXkC,EAAE3B,KACJ1L,KAAKgG,SAAS,CACZwC,kBAAkB,EAClBG,mBAAoB,SAGtB3I,KAAKgG,SAAS,CACZwC,kBAAkB,EAClBG,mBAAoB,SAGJ,SAAhB0E,EAAEZ,WACJzM,KAAKgG,SAAS,CACZ2C,mBAAoB,kDAKjB,IAAAhC,EAAA3G,KACP,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAE+N,QAAS,KACrBlO,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEgO,aAAc,UAA3B,gBACAnO,EAAAC,EAAAC,cAAA,mCACAF,EAAAC,EAAAC,cAAC2H,EAAD,MAEA7H,EAAAC,EAAAC,cAAA,QAAM4H,UAAU,UACd9H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOwH,KAAK,QAAQ1D,GAAG,iBAAiBiI,KAAK,OAAO/I,MAAM,YAAYgI,QAAStK,KAAKI,MAAM0H,eAAgB0F,SAAUxN,KAAKiJ,wBAD3H,YAGE7J,EAAAC,EAAAC,cAAA,SAAOwH,KAAK,QAAQ1D,GAAG,WAAWiI,KAAK,OAAO/I,MAAM,MAAMgI,QAAStK,KAAKI,MAAM4H,SAAUwF,SAAUxN,KAAKkJ,kBAHzG,iBASF9J,EAAAC,EAAAC,cAAA,UAAQ8D,GAAG,aAAaoK,SAAU,SAACpD,GAAYzD,EAAKoD,YAAYK,EAAMC,OAAO/H,SAC1EtC,KAAKI,MAAMuH,cACX3H,KAAKI,MAAMsH,kBAIdtI,EAAAC,EAAAC,cAAA,OAAK8D,GAAG,YAAY7D,MAAO,CAAEyH,QAAShH,KAAKI,MAAM2H,mBAC/C3I,EAAAC,EAAAC,cAACmO,EAAD,CACE3K,YAAa9C,KAAK8C,YAClBJ,iBAAkB1C,KAAK0C,iBACvBgE,cAAe1G,KAAK0G,cACpBnE,UAAWvC,KAAKuC,aAKpBnD,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CACXmO,YAAa,QACbJ,QAAS,OACTzG,UAAW,OACX8G,UAAW,MAGXvO,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,MAAI8D,GAAG,aAAa7D,MAAO,CAAEyH,QAAShH,KAAKI,MAAM0I,oBAAjD,eAAmF9I,KAAKyB,WAAWgC,IAAI4D,KAAU3B,OAAjH,aACAtG,EAAAC,EAAAC,cAAA,MAAI8D,GAAG,iBAAiB7D,MAAO,CAAEyH,QAAShH,KAAKI,MAAMyI,uBAArD,eAA0F7I,KAAKyB,WAAWgC,IAAI4D,KAAU3B,OAAxH,aAEAtG,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEsH,UAAW,SACvBzH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,SAAO8D,GAAG,YAAY0D,KAAK,OAAO8G,YAAY,kBAAkBtL,MAAOtC,KAAKI,MAAMiI,eAAgBmF,SAAUxN,KAAK8J,oBACjH1K,EAAAC,EAAAC,cAAA,SAAO8D,GAAG,WAAW0D,KAAK,OAAO8G,YAAY,mBAAmBtL,MAAOtC,KAAKI,MAAMwH,gBAAiB4F,SAAUxN,KAAKqJ,qBAClHjK,EAAAC,EAAAC,cAAA,KAAG8D,GAAG,sBAAsBpD,KAAKI,MAAMyH,kBACvCzI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAO8D,GAAG,gBAAgB0D,KAAK,OAAO8G,YAAY,UAAUtL,MAAOtC,KAAKI,MAAM+H,aAAcqF,SAAUxN,KAAKsJ,kBAC3GlK,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,YACE8D,GAAG,aACHwK,YAAY,iGACZtL,MAAOtC,KAAKI,MAAMgI,UAClBoF,SAAUxN,KAAK6J,eAEjBzK,EAAAC,EAAAC,cAAC2H,EAAD,MACA7H,EAAAC,EAAAC,cAAA,UACEwH,KAAK,SACL1D,GAAG,cACH2D,QAAS/G,KAAK+I,mBACdxJ,MAAO,CACLsO,gBAAiB7N,KAAKI,MAAM6H,mBAAqB,MAAQ,UACzD6F,gBAAiB9N,KAAKI,MAAM6H,mBAAqB,+BAAiC,qCAI9EtB,EAAKvG,MAAM6H,oBACRtB,EAAKvG,MAAM0H,eAGhB,+CAAApD,OAAsDiC,EAAKlF,WAAWgC,IAAI4D,KAAU3B,OAApF,eAEK,mCAGXtG,EAAAC,EAAAC,cAAA,SACE8D,GAAG,YACH0D,KAAK,WACLwD,QAAStK,KAAKI,MAAMoI,iBACpBgF,SAAUxN,KAAK4J,iBACfmE,YAAa/N,KAAKgK,oBAClBgE,WAAYhO,KAAKiK,mBACjBgE,QAAS,aACTC,OAAQ,aACR3O,MAAO,CAAEyH,QAAShH,KAAKI,MAAMqI,oBAE/BrJ,EAAAC,EAAAC,cAAA,KACE8D,GAAG,aACH7D,MAAO,CAAEyH,QAAShH,KAAKI,MAAMsI,kBAAmB7B,WAAY,IAC5DkH,YAAa/N,KAAKgK,oBAClBgE,WAAYhO,KAAKiK,mBACjBgE,QAAS,aACTC,OAAQ,cANV,+DAUA9O,EAAAC,EAAAC,cAAA,KAAG8D,GAAG,MAAM7D,MAAO,CAAEyH,QAAShH,KAAKI,MAAMwI,aAAzC,oMACAxJ,EAAAC,EAAAC,cAAA,KAAGC,MAAO,CAAE6H,MAAO,UAAapH,KAAKI,MAAMkI,kBAC3ClJ,EAAAC,EAAAC,cAAA,2HAONF,EAAAC,EAAAC,cAAA,UACE2M,KAAK,IACLnF,KAAK,SACL1D,GAAG,cACH8D,UAAU,OACV3H,MAAO,CAAEyH,QAAShH,KAAKI,MAAMuI,oBAC7B5B,QAAS/G,KAAKmK,oBANhB,wBAzwBmB3C,cChB3B2G,IAASC,OAAOhP,EAAAC,EAAAC,cAAC+O,EAAD,MAAkBC,SAASC,eAAe","file":"static/js/main.49c56753.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Spacer = () => <div style={{ height: 10, width: '100%' }} />;\nexport default Spacer;\n","import React from 'react';\n\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport * as crossfilter from 'crossfilter2';\n\nimport { Spacer } from './Spacer';\n\n/**\n * The Charts component holds all logic\n * necessary to render the Attrition,\n * Certification, and Completion interactive\n * charts, as well as the filtering functions\n * necessary to manipulate the underlying data.\n */\nexport class Charts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /**\n       * @param {Object} filterLimits the percentile limits to use\n       * for filtering each chart's students\n       */\n      filterLimits: {\n        'completion-chart': [0, 100],\n        'attrition-chart': [0, 100],\n        'certification-chart': [0, 100],\n      },\n    };\n    // a dummy crossfilter object used so we can initialize fields dependent on\n    // a crossfilter object\n    const tempCrossfilter = crossfilter([]);\n    // selecting different fields of the crossfilter\n    this.completion = tempCrossfilter.dimension(d => d.completion_prediction);\n    this.attrition = tempCrossfilter.dimension(d => d.attrition_prediction);\n    this.certification = tempCrossfilter.dimension(d => d.certification_prediction);\n    // group by integer for graph purposes\n    this.completions = this.completion.group(Math.floor);\n    this.attritions = this.attrition.group(Math.floor);\n    this.certifications = this.certification.group(Math.floor);\n    // fetch by anon_user_id\n    this.anonUserId = tempCrossfilter.dimension(d => d.anon_user_id);\n    // initialize empty charts and chart id lookup hashmap\n    this.charts = [];\n    this.idLookup = {};\n\n    // denotes if the instance crossfilter objects defined above\n    // have been initialized with real data or not\n    // if they haven't, the first chart render call\n    // will initialize all of them with fetched data\n    // passed from Communicator\n    this.initialized = false;\n\n    // bind class functions to `this`\n    this.onAttrClick = this.onAttrClick.bind(this);\n    this.onCompNoCertClick = this.onCompNoCertClick.bind(this);\n    this.filter = this.filter.bind(this);\n  }\n\n  componentDidMount() {\n    // pass Charts' filter function to Communicator parent upon mount\n    this.props.syncChart({\n      filter: this.filter,\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // we should only update if filter limits or data change\n    // this is because the process of rendering the d3 graphs to DOM will\n    // continually trigger rerenders unless we interrupt it\n    if (nextProps.filteredStudents !== this.props.filteredStudents) {\n      return true;\n    }\n    // deep equality check\n    if (JSON.stringify(nextState.filterLimits) !== JSON.stringify(this.state.filterLimits)) {\n      return true;\n    }\n    return false;\n  }\n\n  componentDidUpdate() {\n    // rerender the charts in DOM if our props / state have changed\n    // needed because d3 renders directly to DOM rather than thru React\n    this.renderCharts(this.props.allStudents, this.props.filteredStudents);\n  }\n\n  /**\n   * Sets the filter limits to a preset for\n   * predicted to attrit and not complete the course\n   */\n  onAttrClick() {\n    // TODO(Jeff): document these numbers\n    const limits = [[0, 70], [80, 100], [0, 70]];\n    this.charts.forEach((c, i) => {\n      c.filter(limits[i]);\n    });\n  }\n\n  /**\n   * Sets the filter limits to a preset for\n   * predicted to complete but not earn a cert\n   */\n  onCompNoCertClick() {\n    // TODO(Jeff): document these numbers\n    const limits = [[80, 100], null, [0, 20]];\n    this.charts.forEach((c, i) => {\n      c.filter(limits[i]);\n    });\n  }\n\n  /**\n   * Renders a single bar chart.\n   * @param {String} htmlId the html `id` of the div to render this chart to\n   */\n  barChart(htmlId) {\n    if (!this.barChart.id) this.barChart.id = 0;\n    let id;\n\n    // initialize the chart id in the lookup map\n    // if we've already initialized chart in the DOM, just find the id in the lookup map\n    if (!(htmlId in this.idLookup)) {\n      this.idLookup[htmlId] = this.barChart.id;\n      // eslint-disable-next-line prefer-destructuring\n      id = this.barChart.id;\n    } else {\n      id = this.idLookup[htmlId];\n    }\n\n    // initialize chart properties\n    let margin = {\n      top: 10,\n      right: 10,\n      bottom: 20,\n      left: 10,\n    };\n    let x;\n    let y = d3.scale.linear().range([100, 0]);\n    this.barChart.id += 1;\n    const axis = d3.svg.axis().orient('bottom');\n    const brush = d3.svg.brush();\n    let brushDirty;\n    let dimension;\n    let group;\n    let round;\n    let all;\n\n    /**\n     * Render the actual chart itself according to the parameters set above.\n     */\n    const chart = () => {\n      const width = x.range()[1];\n      const height = y.range()[0];\n      y.domain([0, all.top(1)[0].value]);\n\n      const div = d3.select(`#${htmlId}`);\n      let g = div.select('g');\n\n      const resizePath = (d) => {\n        const e = +(d === 'e');\n        // eslint-disable-next-line no-shadow\n        const x = e ? 1 : -1;\n        // eslint-disable-next-line no-shadow\n        const y = height / 3;\n        // eslint-disable-next-line prefer-template\n        return 'M' + (0.5 * x) + ',' + y\n          + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)\n          + 'V' + ((2 * y) - 6)\n          + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)\n          + 'Z'\n          + 'M' + (2.5 * x) + ',' + (y + 8)\n          + 'V' + ((2 * y) - 8)\n          + 'M' + (4.5 * x) + ',' + (y + 8)\n          + 'V' + ((2 * y) - 8);\n      };\n\n      // Create the skeletal chart.\n      if (g.empty()) {\n        g = div.append('svg')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // eslint-disable-line prefer-template\n\n        g.append('clipPath')\n          .attr('id', 'clip-' + id) // eslint-disable-line prefer-template\n          .append('rect')\n          .attr('width', width)\n          .attr('height', height);\n        g.selectAll('.bar')\n          .data(['background', 'foreground'])\n          .enter().append('path')\n          .attr('class', d => d + ' bar') // eslint-disable-line prefer-template\n          .datum(group.all());\n\n        g.selectAll('.foreground.bar')\n          .attr('clip-path', 'url(#clip-' + id + ')'); // eslint-disable-line prefer-template\n\n        g.append('g')\n          .attr('class', 'axis')\n          .attr('transform', 'translate(0,' + height + ')') // eslint-disable-line prefer-template\n          .call(axis);\n\n        // Initialize the brush component with pretty resize handles.\n        const gBrush = g.append('g').attr('class', 'brush').call(brush);\n        gBrush.selectAll('rect').attr('height', height);\n        gBrush.selectAll('.resize').append('path').attr('d', resizePath);\n      }\n\n      // Only redraw the brush if set externally.\n      if (brushDirty) {\n        brushDirty = false;\n        g.selectAll('.brush').call(brush);\n        if (brush.empty()) {\n          g.selectAll('#clip-' + id + ' rect') // eslint-disable-line prefer-template\n            .attr('x', 0)\n            .attr('width', width);\n        } else {\n          const extent = brush.extent();\n          g.selectAll('#clip-' + id + ' rect') // eslint-disable-line prefer-template\n            .attr('x', x(extent[0]))\n            .attr('width', x(extent[1]) - x(extent[0]));\n        }\n      }\n\n      // generate the path for each bar\n      const barPath = (groups) => {\n        const path = [];\n        let i = -1;\n        const n = groups.length;\n        let d;\n        i += 1;\n        while (i < n) {\n          d = groups[i];\n          path.push('M', x(d.key), ',', height, 'V', y(d.value), 'h9V', height);\n          i += 1;\n        }\n        return path.join('');\n      };\n\n      g.selectAll('.bar').attr('d', barPath);\n    };\n\n    // remove the reset button when we start selecting a range using the mouse\n    brush.on('brushstart.chart', () => {\n      const div = d3.select(`#${htmlId}`);\n      div.select('.title button').style('display', null);\n    });\n\n    // filter as the range selected changes\n    brush.on('brush.chart', () => {\n      const g = d3.select(`#${htmlId}`).select('g');\n      let extent = brush.extent();\n      if (round) {\n        g.select('.brush')\n          .call(brush.extent(extent = extent.map(round)))\n          .selectAll('.resize')\n          .style('display', null);\n      }\n      g.select('#clip-' + id + ' rect') // eslint-disable-line prefer-template\n        .attr('x', x(extent[0]))\n        .attr('width', x(extent[1]) - x(extent[0]));\n      dimension.filterRange(extent);\n      // Get name of chart and limits for that chart\n      this.setState({\n        filterLimits: {\n          ...this.state.filterLimits,\n          [`${htmlId}`]: extent,\n        },\n      });\n      this.props.syncChart({\n        filterLimits: this.state.filterLimits,\n      });\n    });\n\n    // display the reset button only if mouse selected something\n    // if mouse didn't select anything, reset filters and remove the reset button\n    brush.on('brushend.chart', () => {\n      if (brush.empty()) {\n        const div = d3.select(`#${htmlId}`);\n        div.select('.title button').style('display', 'none');\n        div.select('#clip-' + id + ' rect').attr('x', null).attr('width', '100%'); // eslint-disable-line prefer-template\n        dimension.filterAll();\n      }\n    });\n\n    // sets the chart's margins\n    chart.margin = (_) => {\n      if (!_) return margin;\n      margin = _;\n      return chart;\n    };\n\n    // sets the chart's x dimension\n    chart.x = (_) => {\n      if (!_) return x;\n      x = _;\n      axis.scale(x);\n      brush.x(x);\n      return chart;\n    };\n\n\n    // sets the chart's y dimension\n    chart.y = (_) => {\n      if (!_) return y;\n      y = _;\n      return chart;\n    };\n\n    // sets the chart's X data\n    chart.dimension = (_) => {\n      if (!_) return dimension;\n      dimension = _;\n      return chart;\n    };\n\n    // sets the chart's reference unfiltered data\n    chart.all = (_) => {\n      if (!_) return all;\n      all = _;\n      return chart;\n    };\n\n    /**\n     * Filters the chart according to the range given\n     * @param {Array<number>} _ an array of two integers 0-100\n     * denoting the minimum and maximum filter range/extent respectively\n     */\n    chart.filter = (_) => {\n      if (_) {\n        brush.extent(_);\n        dimension.filterRange(_);\n        this.setState({\n          filterLimits: {\n            ...this.state.filterLimits,\n            [`${htmlId}`]: _,\n          },\n        });\n      } else {\n        brush.clear();\n        dimension.filterAll();\n        this.setState({\n          filterLimits: {\n            ...this.state.filterLimits,\n            [`${htmlId}`]: [0, 100],\n          },\n        });\n      }\n      this.props.syncChart(this.state.filterLimits);\n      brushDirty = true;\n      chart();\n      return chart;\n    };\n\n    // sets the chart's Y data\n    chart.group = (_) => {\n      if (!_) return group;\n      group = _;\n      return chart;\n    };\n\n    // sets whether we should round Y data values\n    chart.round = (_) => {\n      if (!_) return round;\n      round = _;\n      return chart;\n    };\n    return d3.rebind(chart, brush, 'on');\n  }\n\n  /**\n   * Filters all charts according to the given filters.\n   * This function is passed to the parent Communicator\n   * and is the programmatic way to filter both the chart UX\n   * and the underlying crossfilter object.\n   * @param {Array<Array<number>>} filters an array of 3 arrays, each\n   * containing filter ranges\n   */\n  filter(filters) {\n    for (let i = 0; i < this.charts.length; i += 1) {\n      this.charts[i].filter(filters[i]);\n    }\n  }\n\n  // resets the ith chart's filter, where i is 0-2 inclusive\n  reset(i) {\n    this.charts[i].filter(null);\n  }\n\n  /**\n   * Rerenders all charts with the given data.\n   * @param {crossfilter} allStudents an unfiltered crossfilter object containing all student data\n   * @param {crossfilter} students a crossfilter object that has been filtered by chart filters\n   */\n  renderCharts(allStudents, students) {\n    // if we aren't given data don't do anything\n    if (!students || !allStudents) {\n      return null;\n    }\n\n    // initialize the selectors of crossfilter data with real data\n    // in this class if we haven't already\n    if (!this.initialized) {\n      this.completion = students.dimension(d => d.completion_prediction);\n      this.attrition = students.dimension(d => d.attrition_prediction);\n      this.certification = students.dimension(d => d.certification_prediction);\n      this.completions = this.completion.group(Math.floor);\n      this.attritions = this.attrition.group(Math.floor);\n      this.certifications = this.certification.group(Math.floor);\n      this.anonUserId = students.dimension(d => d.anon_user_id);\n\n      this.initialized = true;\n    }\n\n    // generate our charts\n    const charts = [\n      this.barChart('completion-chart')\n        .all(allStudents.dimension(d => d.completion_prediction).group(Math.floor))\n        .dimension(this.completion)\n        .group(this.completions)\n        .x(d3.scale.linear()\n          .domain([0, 100])\n          .rangeRound([0, 900])),\n      this.barChart('attrition-chart')\n        .all(allStudents.dimension(d => d.attrition_prediction).group(Math.floor))\n        .dimension(this.attrition)\n        .group(this.attritions)\n        .x(d3.scale.linear()\n          .domain([0, 100])\n          .rangeRound([0, 900])),\n      this.barChart('certification-chart')\n        .all(allStudents.dimension(d => d.certification_prediction).group(Math.floor))\n        .dimension(this.certification)\n        .group(this.certifications)\n        .x(d3.scale.linear()\n          .domain([0, 100])\n          .rangeRound([0, 900])),\n    ];\n\n    // render each chart\n    charts.forEach(chart => chart());\n    // set the charts attribute so we can use it later\n    this.charts = charts;\n    // force a rerender of the parent Communicator so we have accurate\n    // selected student count values in the email form UI\n    this.props.forceRerender();\n    return charts;\n  }\n\n  render() {\n    return (\n      <div>\n        {/* preset filter value option buttons */}\n        <p style={{ float: 'left', clear: 'left', marginTop: '30px' }}>\n          Analytics pre-sets to try: {/* es-lint-disable no-trailing-spaces */}\n          <button type=\"button\" id=\"comp-no-cert\" onClick={this.onCompNoCertClick}>\n            Predicted to complete but not to earn a certificate\n          </button>\n          <div style={{ width: 5, height: 10, display: 'inline-block' }} />\n          <button type=\"button\" id=\"attr-no-comp-cert\" onClick={this.onAttrClick}>\n            Predicted to attrit and not complete\n          </button>\n        </p>\n        <Spacer />\n\n        {/* the chart containers - all actual chart rendering is done directly in the DOM by d3 */}\n        <div id=\"charts\">\n          <div id=\"completion-chart\" className=\"chart\">\n            <div className=\"title\">\n              Completion % chance{' '}\n              <button\n                className=\"reset\"\n                onClick={() => this.reset(0)}\n                style={{\n                  display: 'none',\n                  color: 'black',\n                }}\n              >\n                reset\n              </button>\n            </div>\n          </div>\n          <div id=\"attrition-chart\" className=\"chart\">\n            <div className=\"title\">\n              Attrition % chance{' '}\n              <button\n                className=\"reset\"\n                onClick={() => this.reset(1)}\n                style={{\n                  display: 'none',\n                  color: 'black',\n                }}\n              >\n                reset\n              </button>\n            </div>\n          </div>\n          <div id=\"certification-chart\" className=\"chart\">\n            <div className=\"title\">\n              Certification % chance{' '}\n              <button\n                className=\"reset\"\n                onClick={() => this.reset(2)}\n                style={{\n                  display: 'none',\n                  color: 'black',\n                }}\n              >\n                reset\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* counts for number and percentage of students selected by the filters */}\n        <aside id=\"totals\">\n          <span id=\"active\">\n            {`${(this.anonUserId.top(Infinity).length > 0 ? this.anonUserId.top(Infinity).length : '-')} `}\n          </span>\n          <span id=\"percentage\">\n            ({Math.round((this.anonUserId.top(Infinity).length * 100) / this.props.allStudents.size())}%){' '}\n          </span>\n          of{' '}\n          <span id=\"total\">{this.props.allStudents.size() > 0 ? this.props.allStudents.size() : '-'}</span>\n          {' '}learners selected{' '}\n        </aside>\n      </div>\n    );\n  }\n}\n\nCharts.propTypes = {\n  filteredStudents: PropTypes.objectOf(crossfilter).isRequired,\n  allStudents: PropTypes.objectOf(crossfilter).isRequired,\n  forceRerender: PropTypes.func.isRequired,\n  syncChart: PropTypes.func.isRequired,\n};\nexport default Charts;\n","import React, { Component } from 'react';\n\nimport * as d3 from 'd3';\nimport * as crossfilter from 'crossfilter2';\n\nimport { Charts } from './Charts';\nimport { Spacer } from './Spacer';\n\nimport './styles.css';\n// we manually import edX global styles in the current component\n// import './edxStyles.css';\n\n/**\n * The Communicator component is a self-contained widget that interacts with the\n * [Communicator](https://github.com/CAHLR/Communicator), an algorithm that predicts\n * whether students in online MOOCs are likely to drop out or fail to attain certification in a\n * course.\n * The Communicator component allows instructors in these MOOCs to send emails targeted specifically\n * at these demographics, providing more personalized and targeted instruction.\n */\nclass Communicator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /**\n       * @param {Array<Object>} analyticsOptions Holds HTML <option /> components containing\n       * past communications that have been sent in this course.\n       * The value of each <option /> is a JavaScript object containing the following keys:\n       * @param {Array<number>} attr Array of len 2 w the attrition graph bounds, from 0-100\n       * @param {Array<number>} comp Array of len 2 w the completion graph bounds, from 0-100\n       * @param {Array<number>} cert Array of len 2 w the certification graph bounds, from 0-100\n       * @param {String} subject the saved email subject line\n       * @param {String} body the saved email body\n       * @param {String} reply the saved email's instructor email\n       * @param {String} from the saved email's instructor name\n       * @param {boolean} auto whether or not to use Automated Checking\n       */\n      analyticsOptions: [],\n      /**\n       * @param {String} dropdownValue An empty string representing an empty dropdown selection.\n       */\n      dropdownValue: '',\n      /**\n       * @param {String} instructorEmail the controlled state field for the instructor's email\n       */\n      instructorEmail: '',\n      /**\n       * @param {String} emailButtonError the error to display below the Send button\n       */\n      emailButtonError: '',\n      /**\n       * @param {boolean} analyticsRadio whether the graphs are in Analytics\n       * (intelligent prediction) mode\n       */\n      analyticsRadio: true,\n      /**\n       * @param {String} analyticsDisplay the CSS `display` property to use for\n       * the Charts div container\n       */\n      analyticsDisplay: 'block',\n      /**\n       * @param {boolean} allRadio whether the graphs are disabled (send to all students mode)\n       */\n      allRadio: false,\n      /**\n       * @param {boolean} emailButtonClicked whether or not the Send Email button has been clicked.\n       * This determines if we show the warning/confirmation button or the Send button.\n       */\n      emailButtonClicked: false,\n      /**\n       * @param {number} totalActiveLearners a placeholder number set to\n       * force the component to rerender.\n       */\n      totalActiveLearners: 0,\n      /**\n       * @param {String} emailSubject the controlled state field for the email's subject line\n       */\n      emailSubject: '',\n      /**\n       * @param {String} emailBody the controlled state field for the email's body content\n       */\n      emailBody: '',\n      /**\n       * @param {String} instructorName the controlled state field for the instructor's name\n       */\n      instructorName: '',\n      /**\n       * @param {String} emailSentMessage the message to display at the bottom\n       * of the form after the email has been sent\n       */\n      emailSentMessage: '',\n      /**\n       * @param {String} oldSubject the stored subject line\n       * of the original saved email that is being loaded\n       */\n      oldSubject: '',\n      /**\n       * @param {boolean} automatedChecked controlled state field for the\n       * Automated Checking feature checkbox\n       */\n      automatedChecked: false,\n      /**\n       * @param {String} automatedDisplay the CSS `display` property for\n       * the Automated Checking feature checkbox\n       */\n      automatedDisplay: 'inline',\n      /**\n       * @param {String} automated2Display the CSS `display` property\n       * for the Automated Checking feature <p> descriptor\n       */\n      automated2Display: 'inline',\n      /**\n       * @param {String} saveChangesDisplay the CSS `display` property\n       * for the Save Changes button. This button is only visible\n       * when an existing sent email is being modified after being loaded.\n       */\n      saveChangesDisplay: 'none',\n      /**\n       * @param {String} tipDisplay the hover tooltip for the Automated\n       * Checking feature\n       */\n      tipDisplay: 'none',\n      /**\n       * @param {String} allRecipientsDisplay the CSS `display` property\n       * for the All Recipients count header\n       */\n      allRecipientsDisplay: 'none',\n      /**\n       * @param {String} recipientsDisplay the CSS `display` property\n       * for the Recipients count header (only visible in Analytics mode)\n       */\n      recipientsDisplay: 'block',\n      /**\n       * @param {function} filter the filtering function set by the Charts\n       * component. This function both filters on the underlying crossfilter\n       * data object and modifies the graph UI elements accordingly.\n       * This function is set only after the Charts component mounts.\n       */\n      filter: () => {},\n      /**\n       * @param {Object} filterLimits the filter limits, in percentiles,\n       * for each graph. This should NOT ever be set in the Communicator\n       * component, as the values in this object are set by and synced from\n       * the Charts component. The object is duplicated from the Charts\n       * component to allow for network request functions in the Communicator\n       * component to access the filter limits.\n       */\n      filterLimits: {\n        'completion-chart': [0, 100],\n        'attrition-chart': [0, 100],\n        'certification-chart': [0, 100],\n      },\n    };\n\n    // bind all class functions to `this`\n    this.onEmailButtonClick = this.onEmailButtonClick.bind(this);\n    this.onLoad = this.onLoad.bind(this);\n    this.onAnalyticsRadioClick = this.onAnalyticsRadioClick.bind(this);\n    this.onAllRadioClick = this.onAllRadioClick.bind(this);\n    this.getAnalytics = this.getAnalytics.bind(this);\n    this.getAll = this.getAll.bind(this);\n    this.setInstructorEmail = this.setInstructorEmail.bind(this);\n    this.setEmailSubject = this.setEmailSubject.bind(this);\n    this.clearDrop = this.clearDrop.bind(this);\n    this.makeName = this.makeName.bind(this);\n    this.sendEmails = this.sendEmails.bind(this);\n    this.sendPolicy = this.sendPolicy.bind(this);\n    this.loadData = this.loadData.bind(this);\n    this.onAutomatedClick = this.onAutomatedClick.bind(this);\n    this.setEmailBody = this.setEmailBody.bind(this);\n    this.setInstructorName = this.setInstructorName.bind(this);\n    this.optSelected = this.optSelected.bind(this);\n    this.onCheckTipMouseOver = this.onCheckTipMouseOver.bind(this);\n    this.onCheckTipMouseOut = this.onCheckTipMouseOut.bind(this);\n    this.saveChanges = this.saveChanges.bind(this);\n    this.onSaveChangesClick = this.onSaveChangesClick.bind(this);\n    this.forceRerender = this.forceRerender.bind(this);\n    this.syncChart = this.syncChart.bind(this);\n\n    // initialize the current instance with empty crossfilter objects\n    // so we can call crossfilter methods\n    this.allStudents = crossfilter([]);\n    this.filteredStudents = crossfilter([]);\n    // keep a pointer to the anon_user_id dimension in this class so we can\n    // access the filtered list of students from Charts\n    this.anonUserId = this.filteredStudents.dimension(d => d.anon_user_id);\n  }\n\n  componentWillMount() {\n    this.onLoad();\n  }\n\n  /**\n   * Event hook for clicking the Automated Checking checkbox.\n   * @param {MouseEvent} event the event object\n   */\n  onAutomatedClick(event) {\n    this.setState({\n      automatedChecked: event.target.checked,\n    });\n  }\n\n  /**\n   * Event hook for clicking the Send Email button. First checks\n   * to see if the instructor email is valid, then sends emails,\n   * saves the new email as a template, and regets student data.\n   */\n  async onEmailButtonClick() {\n    if (this.state.instructorEmail === '' || !this.state.instructorEmail.includes('@')) {\n      this.setState({\n        emailButtonError: 'You have entered an invalid Instructor Email',\n      });\n    } else if (this.state.emailButtonClicked) {\n      await this.sendEmails(this.anonUserId.top(Infinity).map(d => d.anon_user_id));\n      await this.sendPolicy(\n        this.anonUserId.top(Infinity).map(d => d.anon_user_id),\n        this.state.filterLimits['completion-chart'],\n        this.state.filterLimits['attrition-chart'],\n        this.state.filterLimits['certification-chart'],\n      );\n      if (this.state.analyticsRadio) {\n        await this.getAnalytics();\n      } else {\n        await this.getAll();\n      }\n\n      this.setState({\n        emailButtonClicked: false,\n      });\n    } else {\n      this.setState({\n        emailButtonClicked: true,\n      });\n    }\n  }\n\n  /**\n   * Function triggered on component mount to fetch data from the server.\n   */\n  async onLoad() {\n    await this.loadData(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/predictions`);\n    await this.getAnalytics();\n  }\n\n  /**\n   * Event hook for clicking the All radio button. Sets filters to\n   * include all students and removes the graph interface.\n   */\n  onAllRadioClick() {\n    this.setState({\n      analyticsDisplay: 'none',\n      allRadio: true,\n      analyticsRadio: false,\n      automatedDisplay: 'none',\n      automated2Display: 'none',\n      allRecipientsDisplay: 'block',\n      recipientsDisplay: 'none',\n      saveChangesDisplay: 'none',\n    });\n    this.state.filter([[0, 100], [0, 100], [0, 100]]);\n    this.getAll();\n  }\n\n  /**\n   * Event hook for clicking the Analytics radio button. Resets\n   * all filters to null (off) and enables the graph interface.\n   */\n  onAnalyticsRadioClick() {\n    this.setState({\n      analyticsDisplay: 'block',\n      automatedDisplay: 'inline',\n      automated2Display: 'inline',\n      allRecipientsDisplay: 'none',\n      recipientsDisplay: 'block',\n      analyticsRadio: true,\n      allRadio: false,\n    });\n    this.state.filter([null, null, null]);\n    this.getAnalytics();\n  }\n\n  /**\n   * Event hook for removing the Tip upon unhovering over text/button.\n   */\n  onCheckTipMouseOut() {\n    this.setState({\n      tipDisplay: 'none',\n    });\n  }\n\n  /**\n   * Event hook for displaying the Tip upon unhovering over text/button.\n   */\n  onCheckTipMouseOver() {\n    this.setState({\n      tipDisplay: 'block',\n    });\n  }\n\n  /**\n   * Event hook for saving changes to the current loaded\n   * saved email/template. Calls the server to save the current\n   * filter limits and selected students.\n   */\n  async onSaveChangesClick() {\n    await this.saveChanges(\n      this.anonUserId.top(Infinity).map(d => d.anon_user_id),\n      this.state.filterLimits['completion-chart'],\n      this.state.filterLimits['attrition-chart'],\n      this.state.filterLimits['certification-chart'],\n    );\n    await this.getAnalytics();\n  }\n\n  /**\n   * Event hook for email body changes.\n   * @param {Event} event the Event object\n   */\n  setEmailBody(event) {\n    this.setState({\n      emailBody: event.target.value,\n    });\n  }\n\n  /**\n   * Event hook for email subject changes.\n   * @param {Event} event the Event object\n   */\n  setEmailSubject(event) {\n    this.setState({\n      emailSubject: event.target.value,\n    });\n  }\n\n  /**\n   * Event hook for instructor email changes.\n   * @param {Event} event the Event object\n   */\n  setInstructorEmail(event) {\n    this.setState({\n      instructorEmail: event.target.value,\n    });\n  }\n\n  /**\n   * Calls the server to fetch saved emails for\n   * all students in the course, then loads the resulting\n   * saved email templates into the selection dropdown.\n   */\n  async getAll() {\n    let settings = await fetch(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/all`, {\n      method: 'GET',\n    });\n    settings = await settings.json();\n    if (settings) {\n      const analyticsOptions = [\n        <option\n          selected\n          value={JSON.stringify({\n            subject: '',\n            comp: null,\n            attr: null,\n            cert: null,\n            body: '',\n            reply: '',\n            from: '',\n          })}\n        >\n          Load Past Communications\n        </option>,\n      ];\n      const keys = Object.keys(settings);\n      for (let i = 0; i < keys.length; i += 1) {\n        const name = this.makeName(settings[keys[i]].timestamp, settings[keys[i]].subject);\n        analyticsOptions.push(<option value={JSON.stringify(settings[keys[i]])}>{name}</option>);\n      }\n      this.setState({\n        analyticsOptions,\n      });\n    }\n  }\n\n  /**\n   * Fetches prediction metrics for all students in the course,\n   * along with sent email templates. Email templates are then loaded\n   * into the selection dropdown.\n   */\n  async getAnalytics() {\n    let analyticsApiResult = await fetch(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/analytics`, {\n      method: 'GET',\n    });\n    analyticsApiResult = await analyticsApiResult.json();\n    if (analyticsApiResult) {\n      this.clearDrop();\n      const appendedOptions = [];\n      // TODO(Jeff): use a better variable name here\n      const analyticsKeys = Object.keys(analyticsApiResult);\n      for (let i = 0; i < analyticsKeys.length; i += 1) {\n        let name = this.makeName(\n          analyticsApiResult[analyticsKeys[i]].timestamp,\n          analyticsApiResult[analyticsKeys[i]].subject,\n        );\n        if (analyticsApiResult[analyticsKeys[i]].auto === 'true') {\n          name = `(Active) ${name}`;\n        }\n        appendedOptions.push((\n          <option value={JSON.stringify(analyticsApiResult[analyticsKeys[i]])}>\n            {name}\n          </option>\n        ));\n      }\n\n      this.setState({\n        analyticsOptions: [...this.state.analyticsOptions, ...appendedOptions],\n      });\n    }\n  }\n\n  /**\n   * Event hook for changes to the instructor name.\n   * @param {Event} event the Event object\n   */\n  setInstructorName(event) {\n    this.setState({\n      instructorName: event.target.value,\n    });\n  }\n\n  /**\n   * Syncs whatever fields/functions are needed from the Charts component\n   * to the Communicator state. This is used to sync the graph `filter`\n   * function as well as sync `filterLimits` from Charts.\n   * @param {Object} _ an object with the fields you wish to set in Communicator's state\n   */\n  syncChart(_) {\n    this.setState({\n      ..._,\n    });\n  }\n\n  /**\n   * Sends emails to students.\n   * @param {Array<String>} ids an Array of anonymized student id Strings\n   */\n  async sendEmails(ids) {\n    const ann = this.state.allRadio;\n    // TODO(Jeff): refactor this to be less hacky\n    // get the course ID\n    const course = window.location.href.split('+')[1];\n    // TODO(Jeff): resolve XSS when we host on edx servers\n    const settings = await fetch(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/email`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ids,\n        subject: this.state.emailSubject,\n        body: this.state.emailBody,\n        reply: this.state.instructorEmail,\n        from: this.state.instructorName,\n        pass: process.env.REACT_APP_EMAIL_CODE,\n        ann,\n        course,\n      }),\n    });\n\n    // if we succeeded in sending, save the current email template\n    // and reload our data\n    if (settings) {\n      await this.saveChanges(\n        this.anonUserId.top(Infinity).map(d => d.anon_user_id),\n        this.state.filterLimits['completion-chart'],\n        this.state.filterLimits['attrition-chart'],\n        this.state.filterLimits['certification-chart'],\n      );\n      if (this.state.analyticsRadio) {\n        this.getAnalytics();\n      } else {\n        this.getAll();\n      }\n      this.setState({\n        emailSentMessage: 'Successfully Sent!',\n        emailButtonClicked: false,\n      });\n      setTimeout(() => {\n        this.setState({\n          emailSentMessage: '',\n        });\n      }, 7500);\n    }\n  }\n\n  /**\n   * Saves changes to an existing sent email/template.\n   * @param {Array<String>} ids an Array of anonymized student ID Strings\n   * @param {Array<number>} comp the Completion filter limits, from 0-100. Array length 2\n   * @param {Array<number>} attr the Attrition filter limits, from 0-100. Array length 2\n   * @param {Array<number>} cert the Certification filter limits, from 0-100. Array length 2\n   */\n  async saveChanges(ids, comp, attr, cert) {\n    const automated = this.state.automatedChecked;\n\n    const settings = await fetch(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/changes`, {\n      method: 'POST',\n      body: JSON.stringify({\n        old_subject: this.state.oldSubject,\n        ids,\n        from: this.state.instructorName,\n        reply: this.state.instructorEmail,\n        subject: this.state.emailSubject,\n        body: this.state.emailBody,\n        comp,\n        attr,\n        cert,\n        auto: automated,\n      }),\n    });\n\n    if (settings) {\n      console.log('Policy Successfully Saved!');\n    }\n  }\n\n  /**\n   * Saves a newly created, successfully sent email template\n   * to the server for future reuse.\n   * @param {Array<String>} ids an Array of anonymized student ID Strings\n   * @param {Array<number>} comp the Completion filter limits, from 0-100. Array length 2\n   * @param {Array<number>} attr the Attrition filter limits, from 0-100. Array length 2\n   * @param {Array<number>} cert the Certification filter limits, from 0-100. Array length 2\n   */\n  async sendPolicy(ids, comp, attr, cert) {\n    const automated = this.state.automatedChecked;\n    const analytics = this.state.analyticsRadio;\n\n    const settings = await fetch(`https://${process.env.REACT_APP_SERVER}:${process.env.REACT_APP_PORT}/api/save`, {\n      method: 'POST',\n      body: JSON.stringify({\n        ids,\n        from: this.state.instructorName,\n        reply: this.state.instructorEmail,\n        subject: this.state.emailSubject,\n        body: this.state.emailBody,\n        comp,\n        attr,\n        cert,\n        auto: automated,\n        analytics,\n        timestamp: new Date(),\n      }),\n    });\n    if (settings) {\n      console.log('Policy Successfullly Sent!');\n    }\n  }\n\n  /**\n   * Resets the selection dropdown.\n   */\n  clearDrop() {\n    this.setState({\n      dropdownValue: '',\n      analyticsOptions: [\n        <option\n          selected\n          value={JSON.stringify({\n            subject: '',\n            comp: null,\n            attr: null,\n            cert: null,\n            body: '',\n            reply: '',\n            from: '',\n          })}\n        >\n          Load Past Communications\n        </option>,\n      ],\n    });\n  }\n\n  /**\n   * Forces the Communicator to rerender by setting a useless state field.\n   * This is needed because filtering on the crossfilter objects does not\n   * set state or change props (since it mutates an existing object), so we\n   * need to manually trigger rerenders whenever a filter call occurs.\n   */\n  forceRerender() {\n    console.log(this.state.totalActiveLearners);\n    this.setState({\n      totalActiveLearners: 0,\n    });\n  }\n\n  /**\n   * Loads analytics/student data from the server into d3 and crossfilter.\n   * @param {String} dataUrl the URL to fetch the secured CSV from\n   * @param {String} json a JSON string containing the data to use instead of secure CSV\n   */\n  async loadData(dataUrl, json) {\n    // if we're given the json, use that instead\n    let response;\n    if (json) {\n      response = await d3.json(dataUrl);\n    } else {\n      // otherwise fetch the secured CSV and parse it\n      response = await fetch(dataUrl, {\n        headers: {\n          Authorization: `Basic ${btoa(`${process.env.REACT_APP_SECRET_USERNAME}:${process.env.REACT_APP_SECRET_PASSWORD}`)}`,\n        },\n        method: 'GET',\n      });\n      response = await response.text();\n      response = d3.csv.parse(response);\n    }\n\n    const students = response;\n    // relabel some fields to conform with the way our component expects it\n    for (let i = 0; i < students.length; i += 1) {\n      students[i].index = i;\n      students[i].completion_prediction = +students[i].completion_prediction;\n      students[i].attrition_prediction = +students[i].attrition_prediction;\n      students[i].certification_prediction = +students[i].certification_prediction;\n    }\n    // initialize the crossfilter objects on the Communicator instance\n    // note that calling filter methods on these objects does NOT trigger\n    // a rerender, meaning you MUST manually call rerender for the DOM\n    // to update correctly.\n    this.allStudents = crossfilter(students);\n    this.filteredStudents = crossfilter(students);\n    this.anonUserId = this.filteredStudents.dimension(d => d.anon_user_id);\n  }\n\n  /**\n   * Creates the name for the dropdown which includes the date and subject.\n   * @param {String} timestamp the timestamp of the dropdown option, in ISO8601 string form\n   * @param {String} subject the subject of the dropdown option\n   */\n  makeName(timestamp, subject) {\n    const formattedDate = new Date(timestamp).toDateString().split(' ');\n    return `${formattedDate[1]} ${formattedDate[2]} ${formattedDate[3]} - ${subject}`;\n  }\n\n  /**\n   * Event hook for selecting an option from the dropdown menu.\n   * Loads the selected saved email/template into the form/graphs.\n   * @param {Object} response the selected <option/> 's value containing the attributes below\n   * @param {Array<number>} attr Array of len 2 containing the attrition graph bounds, from 0-100\n   * @param {Array<number>} comp Array of len 2 containing the completion graph bounds, from 0-100\n   * @param {Array<number>} cert Array of len 2 containng the certification graph bounds, from 0-100\n   * @param {String} subject the saved email subject line\n   * @param {String} body the saved email body\n   * @param {String} reply the saved email's instructor email\n   * @param {String} from the saved email's instructor name\n   * @param {boolean} auto whether Automated Checking is enabled\n   */\n  optSelected(response) {\n    const r = JSON.parse(response);\n    this.setState({\n      oldSubject: r.subject,\n    });\n    this.state.filter([r.comp, r.attr, r.cert]);\n    this.setState({\n      emailSubject: r.subject,\n      emailBody: r.body,\n      instructorEmail: r.reply,\n      instructorName: r.from,\n    });\n    if (r.auto === 'true') {\n      this.setState({\n        automatedChecked: true,\n        saveChangesDisplay: 'none',\n      });\n    } else {\n      this.setState({\n        automatedChecked: false,\n        saveChangesDisplay: 'none',\n      });\n    }\n    if (r.analytics === 'true') {\n      this.setState({\n        saveChangesDisplay: 'inline-block',\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div style={{ padding: 20 }}>\n        <h1 style={{ marginBottom: '0.5em' }}>Communicator</h1>\n        <h3>Select recipients by:</h3>\n        <Spacer />\n        {/* whether predictive Analytics should be used or if we should send to everyone */}\n        <form className=\"radios\">\n          <div>\n            <input type=\"radio\" id=\"analyticsRadio\" name=\"type\" value=\"analytics\" checked={this.state.analyticsRadio} onChange={this.onAnalyticsRadioClick} />\n            Analytics\n            <input type=\"radio\" id=\"allRadio\" name=\"type\" value=\"all\" checked={this.state.allRadio} onChange={this.onAllRadioClick} />\n            All Learners\n          </div>\n        </form>\n\n        {/* dropdown for selecting previously sent emails as templates */}\n        <select id=\"myDropdown\" onChange={(event) => { this.optSelected(event.target.value); }} >\n          {this.state.dropdownValue}\n          {this.state.analyticsOptions}\n        </select>\n\n        {/* Analytics charts, only displayed in Analytics mode */}\n        <div id=\"analytics\" style={{ display: this.state.analyticsDisplay }} >\n          <Charts\n            allStudents={this.allStudents}\n            filteredStudents={this.filteredStudents}\n            forceRerender={this.forceRerender}\n            syncChart={this.syncChart}\n          />\n        </div>\n\n        {/* form for composing the email to send to students */}\n        <form style={{\n          borderStyle: 'solid',\n          padding: '20px',\n          marginTop: '50px',\n          minHeight: 550,\n          }}\n        >\n          <h3>Compose Email</h3>\n          <Spacer />\n          <h6 id=\"recipients\" style={{ display: this.state.recipientsDisplay }}>Recipients: {this.anonUserId.top(Infinity).length} Learners</h6>\n          <h6 id=\"all-recipients\" style={{ display: this.state.allRecipientsDisplay }}>Recipients: {this.anonUserId.top(Infinity).length} Learners</h6>\n\n          <div style={{ marginTop: '20px' }}>\n            <h4>From</h4>\n            <Spacer />\n            <input id=\"from-name\" type=\"text\" placeholder=\"Instructor Name\" value={this.state.instructorName} onChange={this.setInstructorName} />\n            <input id=\"reply-to\" type=\"text\" placeholder=\"Instructor Email\" value={this.state.instructorEmail} onChange={this.setInstructorEmail} />\n            <p id=\"email-button-error\">{this.state.emailButtonError}</p>\n            <div>\n              <Spacer />\n              <h4>Subject</h4>\n              <input id=\"email-subject\" type=\"text\" placeholder=\"Subject\" value={this.state.emailSubject} onChange={this.setEmailSubject} />\n              <Spacer />\n              <h4>Body</h4>\n              <textarea\n                id=\"email-body\"\n                placeholder=\"Use [:fullname:] to insert learner's full name and [:firstname:] to insert learner's last name\"\n                value={this.state.emailBody}\n                onChange={this.setEmailBody}\n              />\n              <Spacer />\n              <button\n                type=\"button\"\n                id=\"emailButton\"\n                onClick={this.onEmailButtonClick}\n                style={{\n                  backgroundColor: this.state.emailButtonClicked ? 'red' : '#e4e4e4',\n                  backgroundImage: this.state.emailButtonClicked ? 'linear-gradient(red,#8b0000)' : 'linear-gradient(#e4e4e4,#d1c9c9)',\n                }}\n              >\n                {(() => {\n                  if (this.state.emailButtonClicked) {\n                    if (!this.state.analyticsRadio) {\n                      return `Are you sure you want to send this email to ${this.anonUserId.top(Infinity).length} students?`;\n                    }\n                    return `Are you sure you want to send this email to ${this.anonUserId.top(Infinity).length} students?`;\n                  }\n                  return 'Send email to selected learners';\n                })()}\n              </button>\n              <input\n                id=\"automated\"\n                type=\"checkbox\"\n                checked={this.state.automatedChecked}\n                onChange={this.onAutomatedClick}\n                onMouseOver={this.onCheckTipMouseOver}\n                onMouseOut={this.onCheckTipMouseOut}\n                onFocus={() => {}}\n                onBlur={() => {}}\n                style={{ display: this.state.automatedDisplay }}\n              />\n              <p\n                id=\"automated2\"\n                style={{ display: this.state.automated2Display, marginTop: -10 }}\n                onMouseOver={this.onCheckTipMouseOver}\n                onMouseOut={this.onCheckTipMouseOut}\n                onFocus={() => {}}\n                onBlur={() => {}}\n              >\n                Automatically check for and send to new matches found daily\n              </p>\n              <p id=\"tip\" style={{ display: this.state.tipDisplay }}>Tip: Enabling this feature will check everyday for learners who meet the analytics criteria of this communication and will send this email to them (learners will never recieve an email twice).</p>\n              <p style={{ color: 'green' }} >{this.state.emailSentMessage}</p>\n              <p>\n                *Please check the maximum daily recipient limit of your email provider.\n                For example, Gmail is 500 per day.*\n              </p>\n            </div>\n          </div>\n        </form>\n        <button\n          href=\"#\"\n          type=\"button\"\n          id=\"saveChanges\"\n          className=\"save\"\n          style={{ display: this.state.saveChangesDisplay }}\n          onClick={this.onSaveChangesClick}\n        >\n        Save Changes\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Communicator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Communicator from './Communicator';\n\nReactDOM.render(<Communicator />, document.getElementById('cahl-communicator-container')); // eslint-disable-line react/jsx-filename-extension\n"],"sourceRoot":""}